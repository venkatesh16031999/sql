CREATE TABLE blockchain ( techname varchar(30), popularity number(5) , language varchar(30) );

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

type 1

INSERT INTO blockchain  VALUES ('Ethereum',1,'Solidity');

INSERT INTO blockchain  VALUES ('Hyperledger Fabric',2,'Node.js');

type 2

INSERT INTO blockchain VALUES ( '&techname' , &popularity , '&language' );

type 3

INSERT INTO blockchain (techname,popularity,language) VALUES ('Ethereum',1,'Simplicity');

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

SELECT * from blockchain;

SELECT productid,sum(Quantity)as total_quantity FROM [OrderDetails] group by productid;

SELECT productid,sum(Quantity)as total_quantity FROM [OrderDetails] group by productid order by total_quantity desc;

SELECT productid,sum(Quantity) as total_quantity FROM [OrderDetails] group by productid having total_quantity>50 order by total_quantity desc;

SELECT * FROM [Suppliers] where city like "%m";

SELECT * FROM [Suppliers] where city like '%l%';    (if word contains l);


SELECT * FROM [Orders] join shippers on orders.shipperid=shippers.shipperid where orderid=10248;

wild cards:

% - 0 or many
_ - 1 char

^ - not including remaining

ORDER BY num ASC || DESC;
GROUP BY --->>> HAVING 

orders to write :

1.SELECT 
2.FROM
3.WHERE
4.GROUP BY
5.HAVING
6.ORDER BY

group by comes with aggregate always

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

ALTER TABLE blockchain ADD marks Number(4);

ALTER TABLE blockchain DROP COLUMN marks;

ALTER TABLE blockchain ADD CONSTRAINT C1 unique (popularity);

ALTER TABLE blockchain DROP constraint C1 ;

///////////////////////////////////////////////////////////

update blockchain set marks=60 where popularity=1;




CREATE SEQUENCE sequence-name
    START WITH initial-value
    INCREMENT BY increment-value
    MAXVALUE maximum-value
    CYCLE | NOCYCLE;


/////////////////////////////////////////////////////////////

sub queries runs first

SELECT * FROM blockchain WHERE popularity>(SELECT * FROM blockchain2)
